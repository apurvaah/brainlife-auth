//node
const fs = require('fs');
const winston = require('winston');

exports.auth = {

    //default user object when registered
    default: {
        scopes: {
            brainlife: ["user"], //note - not yet used much
        },
        profile: {
            public: { },
            private: {
                notification: {
                    newsletter_general: true,
                },
            },
        },
    },

    //isser to use for generated jwt token
    iss: "https://test.brainlife.io/auth",
    ttl: 24*3600*1000, //1 day
    
    public_key: fs.readFileSync(__dirname+'/auth.pub'),
    private_key: fs.readFileSync(__dirname+'/auth.key'),
    
    //option for jwt.sign
    sign_opt: {algorithm: 'RS256'},

    //settingsCallback: '/auth/#!/settings/account',
    settingsCallback: '/settings/account',
};

exports.redis = { server: "redis" }

exports.positionGroups = {
    "PhD Student": /\s(phd|doctoral|grad|graduate)+( candidate| student)/,
    "Faculty": /prof|senior|pi|teacher|scholar|lec|advisor|inst|chair|scient|direc|invest/,
    "Postdoctoral Researcher": /^(research)|^(post)|(phd)/,
    "Research Assistant": /(research)[^\s]*( assistant| associate | coordinator) |(intern)|\bra/,
    "High School Student": /school/,
    "Clinician": /(logist)|(clin)|(neuro)|(chief)|(cal)|\b(md)|(physic)/,
    "Undergraduate Student": /undergrad|\bteaching assistant/,
    "Masters Student": /masters|phil|mtech|msc/,
    "Industry": /software|product|manager|owner|developer|des|engineer/,
    "Student (unspecified)": /student/,
}

exports.event = { 
    amqp: {
        url: "amqp://auth:gobrain@rabbitmq:5672/brainlife"
    },  
}

exports.mongodb = "mongodb://10.0.2.10,10.0.2.14/auth?replicaSet=rs0";
exports.mongoose_debug = true;
    
//comment this out if you don't want to confirm email

//for user/pass login (you should use either local, or ldap - but not both)
exports.local = {
        email_confirmation: {
            subject: 'Brainlife.io Account Confirmation',
            from: 'brainlife <brlife@iu.edu>',  //iu mail server will reject if this is non-repliable address/
        },
        email_passreset: {
                subject: 'Brainlife.io Password Reset Instruction',
                from: 'brainlife <brlife@iu.edu>',  //iu mail server will reject if this is non-repliable address/
        },
        mailer: {
                host: 'mail-relay.iu.edu',
                secure: true,
                auth: {
                    user: 'brlife',
                    pass: 'This is our new password123',
                },
        },
};

//https://console.developers.google.com/apis/credentials?pli=1&project=brain-life-1485532102607
//need to login with hayashis@iu.edu google account to access it
exports.google = {
    client_id: "269307018002-d7gh3m2nigbu6lhqnqol7grrek4enpbo.apps.googleusercontent.com",
    client_secret: "LN1GHhOXZprw5dpEUKunwP7z",

    callback_url: "https://test.brainlife.io/api/auth/google/callback", //google api is very strict about this..
};

/*
//for ldap user/pass 
exports.ldap = {
    //passport-ldap config
    server: {
        url: 'ldaps://ads.iu.edu:636',
        bindDn: 'CN=sciaptad,OU=Accounts,DC=ads,DC=iu,DC=edu',
        bindCredentials: fs.readFileSync(__dirname+'/ldap.password', {encoding: 'utf8'}).trim(),
        searchBase: 'ou=Accounts,dc=ads,dc=iu,dc=edu',
        searchFilter: '(sAMAccountName={{username}})'
    }
};
*/

/*
//for x509
exports.x509 = {
    //http header to look for x509 DN 
    //for nginx set proxy_set_header DN $ssl_client_s_dn
    //for apache, SSLOptions +StdEnvVars will set it to SSL_CLIENT_S_DN
    dn_header: 'dn',
    allow_origin: '*', 
};

//create a "project" at https://console.developers.google.com/apis/dashboard and configure
//oauth credential


//register at https://developers.facebook.com/docs/facebook-login/web
exports.facebook = {
    //v2.8
    app_id: "1878618049037602",
    app_secret: "78130a8a60f807b2ac1a93fb11cf49f4",
    callback_url: "https://soichi7.ppa.iu.edu/api/auth/facebook/callback",
};
*/

//register at https://github.com/settings/developers
exports.github = {
    auto_register: true,
    client_id: "4165133bb07ed7a0c973",
    client_secret: "56943d9771eea5253809c7f606e6948aa17daeea",
    callback_url: "https://test.brainlife.io/api/auth/github/callback",
};

//register at https://orcid.org/developer-tools
exports.orcid = {
    auto_register: true,

    authorization_url: "https://orcid.org/oauth/authorize",
    token_url: "https://orcid.org/oauth/token",

    client_id: "APP-8TM9RWZMIT43M9TL",
    client_secret: "4bc3d53b-dc63-471c-a689-2f8ae13245bc",
    callback_url: "https://test.brainlife.io/api/auth/orcid/callback",
};

//https://auth.globus.org/v2/web/developers
exports.globus = {
    auto_register: true,

    //scopes should be "openid" and "profile"
    client_id: "9be31767-b65e-4467-876a-1fd5cd9d707e",
    client_secret: "c0S9pv+CVhO9VUjZQBOw3ORRx+91dYcfs+COM2JbMqw=",
    callback_url: "https://test.brainlife.io/api/auth/globus/callback",
};

//for iucas login
exports.iucas = {
    //url to redirect after successful iucas login (with ?jwt=<jwt>)
    //you should take jwt, store it on localstorage, and redirect to wherever you want to go
    //this is not the same thing as the ui/config.js -- default_redirect_url !!

    //used for casurl, and also used to return to the auth page to display login error messages
    //home_url: 'https://soichi7.ppa.iu.edu/auth',
};

exports.oidc = {
    auto_register: true,

    issuer: "https://cilogon.org",
    authorization_url: "https://cilogon.org/authorize",
    token_url: "https://cilogon.org/oauth2/token",
    userinfo_url: "https://cilogon.org/oauth2/userinfo", //specific to openid connect

    callback_url: "https://test.brainlife.io/api/auth/oidc/callback",
    //scope: "openid profile email org.cilogon.userinfo",

    client_id: "myproxy:oa4mp,2012:/client_id/234dba466fc3dd2dd30e3414087e3c1b",
    client_secret: "lDiGNgw5zLXcEXzQK1K8uM8kDYD_pLStYcIRKq-aH_OgOa2aJ9kJ95FkxbHhNardbBZUY7LhuFrMT7sYWwprVQ",

    idplist: "https://cilogon.org/include/idplist.xml",
};

exports.db = {
    dialect: "sqlite", 
    storage: "/db/auth.sqlite",
    logging: false
}

exports.express = {
    //web server port
    port: 8080,
    host: "0.0.0.0",
};

exports.logger = {
    winston: {
        //hide headers which may contain jwt
        requestWhitelist: ['url', /*'headers',*/ 'method', 'httpVersion', 'originalUrl', 'query'],
        transports: [
            //display all logs to console
            new winston.transports.Console({
                timestamp: function() {
                    var d = new Date();
                    return d.toString(); //show timestamp
                },
                level: 'debug',
                colorize: true,
                stderrLevels: ["error"], //default includes debug
            }),
            /*
            //store all warnings / errors in error.log
            new (winston.transports.File)({
                filename: '/var/log/sca/error.log',
                level: 'warn'
            })
            */
        ]
    }
}